/**
 */
package org.informationsystem.ismsuite.modeler.process.pnid.pnids.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.informationsystem.ismsuite.modeler.process.pnid.pnids.util.PnidsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PnidsItemProviderAdapterFactory extends PnidsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PnidsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.PNID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PNIDItemProvider pnidItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.PNID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPNIDAdapter() {
		if (pnidItemProvider == null) {
			pnidItemProvider = new PNIDItemProvider(this);
		}

		return pnidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityTypeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityTypeLabelItemProvider entityTypeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityTypeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityTypeLabelAdapter() {
		if (entityTypeLabelItemProvider == null) {
			entityTypeLabelItemProvider = new EntityTypeLabelItemProvider(this);
		}

		return entityTypeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityTypeSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityTypeSequenceItemProvider entityTypeSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityTypeSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityTypeSequenceAdapter() {
		if (entityTypeSequenceItemProvider == null) {
			entityTypeSequenceItemProvider = new EntityTypeSequenceItemProvider(this);
		}

		return entityTypeSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Arc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcItemProvider arcItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Arc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcAdapter() {
		if (arcItemProvider == null) {
			arcItemProvider = new ArcItemProvider(this);
		}

		return arcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.VariableInscriptionLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableInscriptionLabelItemProvider variableInscriptionLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.VariableInscriptionLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableInscriptionLabelAdapter() {
		if (variableInscriptionLabelItemProvider == null) {
			variableInscriptionLabelItemProvider = new VariableInscriptionLabelItemProvider(this);
		}

		return variableInscriptionLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Token} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenItemProvider tokenItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Token}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAdapter() {
		if (tokenItemProvider == null) {
			tokenItemProvider = new TokenItemProvider(this);
		}

		return tokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityTypeItemProvider entityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.EntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityTypeAdapter() {
		if (entityTypeItemProvider == null) {
			entityTypeItemProvider = new EntityTypeItemProvider(this);
		}

		return entityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.VariableSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableSequenceItemProvider variableSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.VariableSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableSequenceAdapter() {
		if (variableSequenceItemProvider == null) {
			variableSequenceItemProvider = new VariableSequenceItemProvider(this);
		}

		return variableSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.PNIDMarking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PNIDMarkingItemProvider pnidMarkingItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.PNIDMarking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPNIDMarkingAdapter() {
		if (pnidMarkingItemProvider == null) {
			pnidMarkingItemProvider = new PNIDMarkingItemProvider(this);
		}

		return pnidMarkingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.TokenBag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenBagItemProvider tokenBagItemProvider;

	/**
	 * This creates an adapter for a {@link org.informationsystem.ismsuite.modeler.process.pnid.pnids.TokenBag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenBagAdapter() {
		if (tokenBagItemProvider == null) {
			tokenBagItemProvider = new TokenBagItemProvider(this);
		}

		return tokenBagItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (pnidItemProvider != null) pnidItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (entityTypeLabelItemProvider != null) entityTypeLabelItemProvider.dispose();
		if (entityTypeSequenceItemProvider != null) entityTypeSequenceItemProvider.dispose();
		if (arcItemProvider != null) arcItemProvider.dispose();
		if (variableInscriptionLabelItemProvider != null) variableInscriptionLabelItemProvider.dispose();
		if (tokenItemProvider != null) tokenItemProvider.dispose();
		if (entityTypeItemProvider != null) entityTypeItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (variableSequenceItemProvider != null) variableSequenceItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (pnidMarkingItemProvider != null) pnidMarkingItemProvider.dispose();
		if (tokenBagItemProvider != null) tokenBagItemProvider.dispose();
	}

}
